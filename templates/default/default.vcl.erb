backend default {
  .host = "<%= node['varnish']['backend_host'] %>";
  .port = "<%= node['varnish']['backend_port'] %>";
}

acl internal_nrel {
  "localhost";













}

sub vcl_recv {
  # Remove all stats cookies:
  #
  # - Google Analytic cookies named __utm* (utma, utmb, etc)
  # - Crazy Egg "is_returning" cookie
  set req.http.Cookie = regsuball(req.http.Cookie, "(^|; ) *(__utm.|is_returning)=[^;]+;? *", "\1");

  # Remove the cookie if it's now empty, so simple stats cookies don't prevent caching.
  if(req.http.Cookie == "") {
    remove req.http.Cookie;
  }

  # Remove the cookie for all static files, so they can always be returned from
  # the cache, even if the user has other cookies set.
  if(req.url ~ "\.(html|js|css|png|gif|jpg|jpeg)$") {
    remove req.http.Cookie;
  }

  # Allow internal connections to force cache misses for testing/debug
  # purposes.
  if(req.http.Cache-Control ~ "no-cache" && client.ip ~ internal_nrel) {
    set req.hash_always_miss = true;
  }
}

sub vcl_hash {
  # Add the original protocol to the hash, so HTTPS and HTTP caches are kept
  # separate.
  if(req.http.X-Forwarded-Proto) {
    hash_data(req.http.X-Forwarded-Proto);
  }
}

import std;
sub vcl_fetch {
  # Parse cache control headers out of the custom Surrogate-Control header.
  # This header controls only Varnish, and is not passed onto the end-user.
  # This allows for independant control of how the end-user should cache things
  # (Cache-Control) and how Varnish should cache things (Surrogate-Control).
  if(beresp.http.Surrogate-Control) {
    # Parse the max-age from the Surrogate-Control header and set the
    # response's TTL to this value.
    set beresp.http.surrogate_max_age = regsub(beresp.http.Surrogate-Control, "max-age\s*=\s*(\d+)", "\1s");
    if(beresp.http.surrogate_max_age ~ "^\d+s$") {
      set beresp.ttl = std.duration(beresp.http.surrogate_max_age, 0s);
    }

    # Remove temp variable.
    unset beresp.http.surrogate_max_age;

    # Remove the Surrogate-Control header which is intended for internal
    # Varnish use only.
    unset beresp.http.Surrogate-Control;
  }
}
